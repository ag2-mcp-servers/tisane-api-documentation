# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:31:13+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, RootModel


class HypernymsGetResponse(RootModel[List[List[Union[float, str]]]]):
    root: List[List[Union[float, str]]] = Field(
        ...,
        examples=[
            [
                [68126, 1, 'the principal bad character in a film or work of fiction'],
                [155184, 1, 'a member of the Jedi order in the Star Wars franchise'],
                [
                    61305,
                    2,
                    'an imaginary person represented in a work of fiction (play or film or story).   \r\n E.g. "she is the main character in the novel"',
                ],
                [62644, 2, 'a person who does harm to others'],
                [
                    10275,
                    3,
                    'a human being.   \r\n E.g. "there was too much for one person to do"',
                ],
                [
                    60709,
                    3,
                    'a creature of the imagination; a person that exists only in legends or myths or fiction',
                ],
                [61497, 3, 'a person who for some reason is not wanted or welcome'],
                [
                    10268,
                    4,
                    'a living thing that has (or can develop) the ability to act or function independently',
                ],
                [10267, 5, 'a living (or once living) entity'],
                [10278, 6, 'an object occurring naturally; not made by man'],
                [
                    10265,
                    7,
                    'a thing; a tangible and visible entity; an entity that can cast a shadow.   \r\n E.g. "it was full of rackets, balls and other objects"',
                ],
                [10258, 8, 'an entity that has physical existence'],
            ]
        ],
    )


class Feature(BaseModel):
    index: Optional[float] = Field(None, examples=[9])
    value: Optional[str] = Field(None, examples=['3'])


class InflectionsGetResponseItem(BaseModel):
    features: Optional[List[Feature]] = Field(
        None, examples=[[{'index': 9, 'value': '3'}, {'index': 15, 'value': 'NOM'}]]
    )
    isLemma: Optional[bool] = Field(None, examples=[True])
    text: Optional[str] = Field(None, examples=['Соединённые Штаты Америки'])


class InflectionsGetResponse(RootModel[List[InflectionsGetResponseItem]]):
    root: List[InflectionsGetResponseItem] = Field(
        ...,
        examples=[
            [
                {
                    'features': [
                        {'index': 9, 'value': '3'},
                        {'index': 15, 'value': 'NOM'},
                    ],
                    'isLemma': True,
                    'text': 'Соединённые Штаты Америки',
                },
                {
                    'features': [
                        {'index': 15, 'value': 'GEN'},
                        {'index': 9, 'value': '3'},
                    ],
                    'text': 'Соединенных Штатов Америки',
                },
                {
                    'features': [
                        {'index': 15, 'value': 'INST'},
                        {'index': 9, 'value': '3'},
                    ],
                    'text': 'Соединенными Штатами Америки',
                },
                {
                    'features': [
                        {'index': 15, 'value': 'DAT'},
                        {'index': 9, 'value': '3'},
                    ],
                    'text': 'Соединенным Штатам Америки',
                },
                {
                    'features': [
                        {'index': 15, 'value': 'PREP'},
                        {'index': 9, 'value': '3'},
                    ],
                    'text': 'Соединенных Штатах Америки',
                },
                {
                    'features': [
                        {'index': 24, 'value': 'THNG'},
                        {'index': 2, 'value': '1'},
                        {'index': 9, 'value': '3'},
                        {'index': 7, 'value': 'NA'},
                        {'index': 15, 'value': 'ACC'},
                    ],
                    'text': 'Соединённые Штаты Америки',
                },
            ]
        ],
    )


class LmFamilyGetResponse(BaseModel):
    definition: Optional[str] = Field(
        None,
        examples=[
            'a literary technique that introduces a radical change in the direction or expected outcome of the plot in a work of fiction'
        ],
    )
    description: Optional[str] = Field(None, examples=['plot twist'])
    hypernyms: Optional[List[List[float]]] = Field(
        None,
        examples=[
            [[49398, 1], [50078, 1], [49393, 2], [50079, 2], [49327, 3], [10295, 4]]
        ],
    )
    permId: Optional[str] = Field(None, examples=[''])
    requestId: Optional[str] = Field(
        None, examples=['d67becb4-bf42-4ab8-854d-9442d956e43b']
    )
    wikidata: Optional[str] = Field(None, examples=['Q1321123'])
    wordnet30: Optional[str] = Field(None, examples=[''])


class Family(BaseModel):
    Key: Optional[float] = Field(None, examples=[51804])
    Value: Optional[Dict[str, Any]] = None
    definition: Optional[str] = Field(
        None,
        examples=['a pasta made in northern Africa of crushed and steamed semolina'],
    )


class Feature1(BaseModel):
    index: Optional[float] = Field(None, examples=[16])
    type: Optional[str] = Field(None, examples=['Semantics'])
    value: Optional[str] = Field(None, examples=['1'])


class SensesGetResponseItem(BaseModel):
    families: Optional[List[Family]] = Field(
        None,
        examples=[
            [
                {
                    'Key': 51804,
                    'Value': {},
                    'definition': 'a pasta made in northern Africa of crushed and steamed semolina',
                }
            ]
        ],
    )
    features: Optional[List[Feature1]] = Field(
        None,
        examples=[
            [
                {'index': 16, 'value': '1'},
                {'index': 22, 'type': 'Semantics', 'value': 'FOOD'},
                {'index': 4, 'value': 'REG'},
                {'index': 3, 'value': 'YES'},
                {'index': 26, 'value': 'PH'},
                {'index': 24, 'value': 'THNG'},
                {'index': 23, 'value': 'THNG'},
                {'index': 22, 'value': 'NO'},
                {'index': 1, 'value': 'NOUN'},
                {'index': 2, 'value': '1'},
                {'index': 4, 'type': 'Style', 'value': 'LAT'},
                {'index': 34, 'value': 'ALL'},
                {'index': 33, 'value': 'ALL'},
                {'index': 32, 'value': 'BEF'},
                {'index': 15, 'value': 'ALL'},
                {'index': 14, 'value': 'NPA'},
                {'index': 9, 'value': '3'},
                {'index': 5, 'value': 'ALL'},
            ]
        ],
    )
    frequency: Optional[float] = Field(None, examples=[1])
    isLemma: Optional[bool] = Field(None, examples=[True])
    legacyMapId: Optional[float] = Field(None, examples=[58076])
    lemma: Optional[str] = Field(None, examples=['couscous'])
    lexemeId: Optional[float] = Field(None, examples=[28041])


class SensesGetResponse(RootModel[List[SensesGetResponseItem]]):
    root: List[SensesGetResponseItem] = Field(
        ...,
        examples=[
            [
                {
                    'families': [
                        {
                            'Key': 51804,
                            'Value': {},
                            'definition': 'a pasta made in northern Africa of crushed and steamed semolina',
                        }
                    ],
                    'features': [
                        {'index': 16, 'value': '1'},
                        {'index': 22, 'type': 'Semantics', 'value': 'FOOD'},
                        {'index': 4, 'value': 'REG'},
                        {'index': 3, 'value': 'YES'},
                        {'index': 26, 'value': 'PH'},
                        {'index': 24, 'value': 'THNG'},
                        {'index': 23, 'value': 'THNG'},
                        {'index': 22, 'value': 'NO'},
                        {'index': 1, 'value': 'NOUN'},
                        {'index': 2, 'value': '1'},
                        {'index': 4, 'type': 'Style', 'value': 'LAT'},
                        {'index': 34, 'value': 'ALL'},
                        {'index': 33, 'value': 'ALL'},
                        {'index': 32, 'value': 'BEF'},
                        {'index': 15, 'value': 'ALL'},
                        {'index': 14, 'value': 'NPA'},
                        {'index': 9, 'value': '3'},
                        {'index': 5, 'value': 'ALL'},
                    ],
                    'frequency': 1,
                    'isLemma': True,
                    'legacyMapId': 58076,
                    'lemma': 'couscous',
                    'lexemeId': 28041,
                },
                {
                    'families': [
                        {
                            'Key': 53366,
                            'Value': {},
                            'definition': 'a spicy dish that originated in northern Africa; consists of pasta steamed with a meat and vegetable stew',
                        }
                    ],
                    'features': [
                        {'index': 16, 'value': '1'},
                        {'index': 22, 'type': 'Semantics', 'value': 'FOOD'},
                        {'index': 4, 'value': 'REG'},
                        {'index': 3, 'value': 'YES'},
                        {'index': 26, 'value': 'PH'},
                        {'index': 24, 'value': 'THNG'},
                        {'index': 23, 'value': 'THNG'},
                        {'index': 22, 'value': 'NO'},
                        {'index': 1, 'value': 'NOUN'},
                        {'index': 2, 'value': '1'},
                        {'index': 34, 'value': 'ALL'},
                        {'index': 33, 'value': 'ALL'},
                        {'index': 32, 'value': 'BEF'},
                        {'index': 15, 'value': 'ALL'},
                        {'index': 14, 'value': 'NPA'},
                        {'index': 9, 'value': '3'},
                        {'index': 5, 'value': 'ALL'},
                    ],
                    'frequency': 1,
                    'isLemma': True,
                    'legacyMapId': 58076,
                    'lemma': 'couscous',
                    'lexemeId': 28041,
                },
            ]
        ],
    )


class ValuesGetResponse(RootModel[List[str]]):
    root: List[str] = Field(
        ...,
        examples=[
            [
                'ada',
                'american_express',
                'authorities',
                'bcg',
                'bitcoin',
                'dash',
                'diners_club',
                'darknet',
                'discovery',
                'ethereum',
                'extremist',
                'facebook',
                'fictional_character',
                'hexadecimal',
                'http',
                'iban',
                'important_person',
                'instagram',
                'intelligence_agency',
                'jcb',
                'law_enforcement_agency',
                'litecoin',
                'mastercard',
                'md5',
                'media',
                'monero',
                'monero_payment_id',
                'maestro',
                'ordinal',
                'piracy',
                'pnr',
                'sha-1',
                'spiritual_being',
                'tor',
                'twitter',
                'unix',
                'unionpay',
                'v4',
                'v6',
                'visa',
                'weibo',
                'windows',
                'zcash',
            ]
        ],
    )
